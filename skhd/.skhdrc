# Reload yabai
# ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# Reload skhd
# ctrl + alt + cmd - k : brew services restart skhd

# Switch layout
# shift + alt - 7 : yabai -m config layout float
# shift + alt - 8 : yabai -m config layout stack
# shift + alt - 9 : yabai -m config layout bsp

# Fast focus app
# shift + alt - return : open "/Applications/kitty.app" ~
shift + alt - n : open "/Applications/Hyper.app"
shift + alt - b : open "/Applications/Brave Browser.app"
shift + alt - g : open "/Applications/Google Chrome.app"
shift + alt - m : open "/Applications/Google Chrome Canary.app"
shift + alt - k : open "/Applications/Firefox.app"
shift + alt - h : open "/Users/x71c9"
shift + alt - u : open "/Applications/Transmit.app"
shift + alt - v : open "/Applications/ExpressVPN.app"
shift + alt - y : open "/Applications/WhatsApp.app"
shift + alt - s : open "/Applications/Slack.app"
shift + alt - t : open "/Applications/Telegram.app"
# shift + alt - m : open "/System/Applications/Mail.app"
# shift + alt - t : open "/System/Applications/Utilities/Terminal.app"
# shift + alt - c : open "/System/Applications/Calendar.app"
shift + alt - 0x2B : open "x-apple.systempreferences:" # 0x2B is , (comma)

# Fast new window Hyper
# ctrl + shift + alt - n : sh "/Users/x71c9/repos/config/scripts/open_hyper_new_window.sh"; skhd -k "escape"
# ctrl + shift + alt - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# Toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# Focus window
# alt - h : yabai -m window --focus west || yabai -m window --focus last
# alt - j : yabai -m window --focus south
# alt - k : yabai -m window --focus north
# alt - l : yabai -m window --focus east || yabai -m window --focus first

# Swap window
# shift + alt - h : yabai -m window --swap west || yabai -m window --swap last
# shift + alt - j : yabai -m window --swap south
# shift + alt - k : yabai -m window --swap north
# shift + alt - l : yabai -m window --swap east || yabai -m window --swap first

# Swap window display
# ctrl + shift + alt - h : (yabai -m window --display west && yabai -m display --focus west) || (yabai -m window --display prev && yabai -m display --focus prev) || (yabai -m window --display last && yabai -m display --focus last)
# ctrl + shift + alt - j : (yabai -m window --display south && yabai -m display --focus south)
# ctrl + shift + alt - k : (yabai -m window --display north && yabai -m display --focus north)
# ctrl + shift + alt - l : (yabai -m window --display east && yabai -m display --focus east) || (yabai -m window --display next && yabai -m display --focus next) || (yabai -m window --display first && yabai -m display --focus first)

# Focus display
# ctrl + alt - h : yabai -m display --focus west || yabai -m display --focus prev || yabai -m display --focus last
# ctrl + alt - j : yabai -m display --focus south
# ctrl + alt - k : yabai -m display --focus north
# ctrl + alt - l : yabai -m display --focus east || yabai -m display --focus next || yabai -m display --focus first

# FZF Application
# cmd + alt -space : sh ~/repos/config/scripts/popup.sh

# Defin√¨e modes
# :: default  : yabai -m config active_window_border_color 0xff61afef
# :: default  : yabai -m config active_window_border_color 0xffa5d034
# :: default  : yabai -m config active_window_border_color 0xff7503cb
# :: focus  @ : yabai -m config active_window_border_color 0xffe06c75  # Focus window, desktop, monitors
# :: new    @ : yabai -m config active_window_border_color 0xff56ff00  # New window

# :: grid   @ : yabai -m config active_window_border_color 0xff56b6c2  # Floating window layout
# :: swap   @ : yabai -m config active_window_border_color 0xffc678dd  # Swap windows
# :: warp   @ : yabai -m config active_window_border_color 0xffe5c07b  # Warp and send to desktop/monitors
# :: warpnf @ : yabai -m config active_window_border_color 0xffd19a66  # Same, but don't follow focus
# :: resize @ : yabai -m config active_window_border_color 0xff98c379  # Resize window operations


# Enter FOCUS mode with cmd + .
# Enter NEW mode with cmd + ctrl + .
# Getting out of any mode can also be done with ESCAPE.
# default                             < cmd - 0x2F           ; focus
# focus                               < cmd - 0x2F           ; default
# default, focus                      < cmd + shift - 0x2F   ; new
# focus, new                          < escape               ; default

# Focus app
# focus < return : open "/Applications/kitty.app"; skhd -k "escape"
# focus < h : open "/Applications/Hyper.app"; skhd -k "escape"
# focus < b : open "/Applications/Brave Browser.app"; skhd -k "escape"
# focus < t : open "/System/Applications/Utilities/Terminal.app"; skhd -k "escape"
# focus < f : open "/Users/x71c9"; skhd -k "escape"
# focus < u : open "/Applications/Transmit.app"; skhd -k "escape"
# focus < e : open "/Applications/ExpressVPN.app"; skhd -k "escape"
# focus < y : open "/Applications/WhatsApp.app"; skhd -k "escape"
# focus < s : open "/Applications/Slack.app"; skhd -k "escape"
# focus < m : open "/System/Applications/Mail.app"; skhd -k "escape"
# focus < c : open "/System/Applications/Calendar.app"; skhd -k "escape"
# focus < 0x2B : open "x-apple.systempreferences:"; skhd -k "escape" # 0x2B is , (comma)

# New window Hyper
# new < h : sh "/Users/x71c9/repos/config/scripts/open_hyper_new_window.sh"; skhd -k "escape"

# app specific binds
# cmd - 0x2B [
#   "Hyper" : open "/Users/x71c9/scripts/new_hyper_window.app"; skhd -k "escape"
# ]

# Application Shortcuts
# Focus
# cmd + shift - b : open "/Applications/Brave Browser.app"
# cmd + shift - x : open /Applications/Hyper.app
# cmd + shift - h : open  /System/Applications/Utilities/Terminal.app
# cmd + shift - i : open "x-apple.systempreferences:"
# cmd + shift - f : open ~
# cmd + shift - u : open /Applications/Transmit.app
# cmd + shift - m : open /System/Applications/Mail.app
# cmd + shift - a : open /System/Applications/Calendar.app
# cmd + shift - k : open /Applications/WhatsApp.app
# cmd + shift - e : open /Applications/ExpressVPN.app

# cmd + shift - c : open /Applications/Google Chrome.app

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~


# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.





# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# alt - 1 : tabai -m window --focus 1
# alt - 2 : tabai -m window --focus 2
# alt - 3 : tabai -m window --focus 3
# alt - 4 : tabai -m window --focus 4

# move managed window
# shift + cmd - h : yabai -m window --warp west
# shift + cmd - l : yabai -m window --warp east
# shift + cmd - j : yabai -m window --warp south
# shift + cmd - k : yabai -m window --warp north

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
                  # index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  # yabai -m window --space "${index}" && \
                  # yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - x  : yabai -m display --focus next
# ctrl + alt - 1  : yabai -m display --focus 1
# ctrl + alt - 2  : yabai -m display --focus 2
# ctrl + alt - 3  : yabai -m display --focus 3
# ctrl + alt - 4  : yabai -m display --focus 4

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - v  : yabai -m window --display next; yabai -m display --focus prev
# ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2
# ctrl + cmd - 3  : yabai -m window --display 3; yabai -m display --focus 3
# ctrl + cmd - 4  : yabai -m window --display 4; yabai -m display --focus 4

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

